# Nginx的事件模块配置
events {
    worker_connections 1024; # 每个工作进程的最大连接数
}

# HTTP服务器配置
http {
    # 定义一个名为'backend_server'的上游服务
    # 'backend:8000'中的'backend'是docker-compose.yml中定义的后端服务名
    # Docker的内部DNS会自动将其解析到后端容器的IP地址
    upstream backend_server {
        server backend:8000;
    }

    # 主服务器配置
    server {
        listen 80; # 监听80端口，这是标准的HTTP端口
        server_name localhost; # 服务器名

        # 根路径'/'的请求处理
        location / {
            # --- CORS Pre-flight (预检) 请求处理 ---
            # 浏览器在发送复杂请求（如带自定义头的POST请求）前，会先发送一个OPTIONS请求
            if ($request_method = 'OPTIONS') {
                # 允许所有来源的跨域请求。生产环境中应替换为具体的前端域名。
                add_header 'Access-Control-Allow-Origin' '*';
                # 允许的HTTP方法
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
                # 允许的请求头
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
                # 允许浏览器发送凭据（如cookies）
                add_header 'Access-Control-Allow-Credentials' 'true';
                # 预检请求的有效期
                add_header 'Access-Control-Max-Age' 1728000;
                # 对于预检请求，直接返回204 No Content，表示允许，无需将请求转发到后端
                return 204;
            }

            # --- CORS Actual 请求处理 ---
            # 对实际的请求（GET, POST等）也需要添加CORS头
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            # --- 代理配置 ---
            # 将请求代理到上游的backend_server
            proxy_pass http://backend_server;

            # 设置代理头，将原始请求信息传递给后端应用
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # 提升对WebSocket的支持（如果未来需要的话）
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}
